# vim: ai et ts=2 st=2 sw=2 :
---
- name: Check if we're running supported os
  ansible.builtin.assert:
    fail_msg: "{{ role_name }} only supports ubuntu versions 20,22,24 - centos versions 7, centos stream versions 8, rhel versions 8, 9!"
    success_msg: "{{ role_name }} supports {{ ansible_distribution }} version {{ ansible_distribution_version }}"
    quiet: "{{ not ansible_check_mode }}"
    that:
      ( ansible_distribution|lower == "ubuntu" and ansible_distribution_version|int in [20, 22, 24] )
      or ( ansible_distribution|lower == "centos" and ansible_distribution_major_version|int in [7, 8] )
      or ( ansible_os_family|lower == "redhat" and ansible_distribution_major_version|int in [8, 9] )
      or ( ansible_distribution|lower == "fedora" and ansible_distribution_major_version|int in [38, 39] )

- name: Set sysctl
  ansible.builtin.include_tasks: sysctl.yml
  loop: '{{ sysctl_d | dict2items }}'
  loop_control:
    loop_var: outer_item
    label: '{{ outer_item.key }}'

- name: Find all files in sysctl.d
  ansible.builtin.find:
    paths: /etc/sysctl.d
    file_type: file
    patterns: '*.conf'
  register: sysctl_files

- name: Make list of exclusive files
  ansible.builtin.set_fact:
    sysctl_exclusive_files: '`{{ sysctl_exclusive_files | default([]) + ["/etc/sysctl.d/" + item] }}`'
  loop: '{{ sysctl_d | dict2items | map(attribute="key") | list }}'
  when: sysctl_exclusive

- name: Remove all non exclusive sysctl.d files
  ansible.builtin.file:
    name: '{{ item }}'
    state: absent
  loop: '{{ sysctl_files.files | map(attribute="path") | list | difference(sysctl_exclusive_files) }}'
  when: sysctl_exclusive
